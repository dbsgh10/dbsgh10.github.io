---
layout: single
title:  "신박한 그리디 알고리즘"
date:   2020-04-12 16:36:20 +0900
categories: jekyll update
---

# 신박한 그리디 알고리즘(30)



### * 백준 10610번 : 30 *



#### **문제 **

---

어느 날, 미르코는 우연히 길거리에서 양수 N을 보았다. 미르코는 30이란 수를 존경하기 때문에, 그는 길거리에서 찾은 수에 포함된 숫자들을 섞어 30의 배수가 되는 가장 큰 수를 만들고 싶어한다.



#### **입력 **

---

N을 입력받는다. N는 최대 $10^5$개의 숫자로 구성되어 있으며, 0으로 시작하지 않는다.



#### **출력 **

---

미르코가 만들고 싶어하는 수가 존재한다면 그 수를 출력하라. 그 수가 존재하지 않는다면, -1을 출력하라.





#### **예제 입력1 **

---

```
30
```

#### **예제 출력1 **

---

```
30
```

#### **예제 입력2 **

---

```
102
```

#### 예제 출력2 **

---

```
210
```

#### **예제 입력3 **

---

```
2931
```

#### **예제 출력3 **

---

```
-1
```

#### **예제 입력4 **

---

```
80875542
```

#### **예제 출력4 **

---

```
88755420
```



### 풀이방법

---



- 입력조건과 문제에 대한 조건을 확인하고 조건문을 작성해서 문제를 해결한다



*N을 입력받는다. N는 최대 $10^5$개의 숫자로 구성되어 있으며, 0으로 시작하지 않는다.*



- 입력값이 10000까지가 아니라 10000...000 숫자의 자리수가 가능하다는 것이다.
- 정수형이나 실수형타입으로는 입력값을 받을수 없음
  - 문자열로 입력을 받고 하나하나 비교하고 조합해야함

```java
	strLen = str.length();
	numCountArr = new int[10];
	long total = 0;

		for(int i=0; i < strLen; i++) {

			int tNum = Integer.parseInt(str.substring(i, i+1));

			numCountArr[tNum] += 1;

			total+=tNum;
```









*30의 배수가 되는 가장 큰 수를 만들고 싶어한다.*



* 30의 배수가 되는 조건을 생각해보고 그에 따른 조건문을 착성한다



**조건 1)  숫자에 0이 있어야 한다.**

* 30의 배수는 0이 있어야하고 입력받은 수에 0이 없다면 유효하지 않으므로 -1을 출력, 종료



**조건 2) 각 자리의 모든 숫자의 합은 3의 배수이다.** 

* 3의 배수의 모든 자리 숫자의 합은 3의 배수인 성질을 이용해야한다.
* ex) 45(9), 135(9), 324(9)

```java
if(!str.contains("0") || total % 3 != 0) {

			System.out.println("-1");
			return;
		} 
```



* 조건 1과 2가 만족하면 입력 받은 수가 30의 배수임을 알 수 있다. 



* 입력값을 저장한 0~9까지 숫자의 개수를 가지고있는 배열을 9부터 0까지 문자열을 합하면 결과가 된다.

```java
StringBuilder sb = new StringBuilder();

		for(int i = 9; i >= 0; i--) {

			while(numCountArr[i] > 0) {

				sb.append(i);
				numCountArr[i]--;
			}
		} 
```



## 최종 소스코드 ##



```java
import java.util.Scanner;
 
public class Main {
    public static final int MAX = 100000;
    
    public static String str;
    public static int[] numCountArr;
    public static long strLen;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        str= sc.nextLine();
        
        strLen = str.length();
        numCountArr = new int[10];
        long total = 0;
        for(int i=0; i < strLen; i++) {
            int tNum = Integer.parseInt(str.substring(i, i+1));
            numCountArr[tNum] += 1;
            total+=tNum;
        }
        
        
        if(!str.contains("0") || total % 3 != 0) {
            System.out.println("-1");
            return;
        }
        
        StringBuilder sb = new StringBuilder();
        for(int i = 9; i >= 0; i--) {
            while(numCountArr[i] > 0) {
                sb.append(i);
                numCountArr[i]--;
            }
        }
        System.out.println(sb.toString());
    }
}
```










---

### 출처

[백준 10610 포스팅](https://pangsblog.tistory.com/87)

[백준 10610 문제](https://www.acmicpc.net/problem/10610)



